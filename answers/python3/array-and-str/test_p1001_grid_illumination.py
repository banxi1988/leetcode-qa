# coding: utf-8

__author__ = '代码会说话'

"""
1001. 网格照明 

在 N x N 的网格上，每个单元格 (x, y) 上都有一盏灯，其中 0 <= x < N 且 0 <= y < N 。

最初，一定数量的灯是亮着的。lamps[i] 告诉我们亮着的第 i 盏灯的位置。每盏灯都照亮其所在 x 轴、y 轴和两条对角线上的每个正方形（类似于国际象棋中的皇后）。

对于第 i 次查询 queries[i] = (x, y)，如果单元格 (x, y) 是被照亮的，则查询结果为 1，否则为 0 。

在每个查询 (x, y) 之后 [按照查询的顺序]，我们关闭位于单元格 (x, y) 上或其相邻 8 个方向上（与单元格 (x, y) 共享一个角或边）的任何灯。

返回答案数组 answer。每个值 answer[i] 应等于第 i 次查询 queries[i] 的结果。

 

示例：

输入：N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
输出：[1,0]
解释： 
在执行第一次查询之前，我们位于 [0, 0] 和 [4, 4] 灯是亮着的。
表示哪些单元格亮起的网格如下所示，其中 [0, 0] 位于左上角：
1 1 1 1 1
1 1 0 0 1
1 0 1 0 1
1 0 0 1 1
1 1 1 1 1
然后，由于单元格 [1, 1] 亮着，第一次查询返回 1。在此查询后，位于 [0，0] 处的灯将关闭，网格现在如下所示：
1 0 0 0 1
0 1 0 0 1
0 0 1 0 1
0 0 0 1 1
1 1 1 1 1
在执行第二次查询之前，我们只有 [4, 4] 处的灯亮着。现在，[1, 0] 处的查询返回 0，因为该单元格不再亮着。
 

提示：

1 <= N <= 10^9
0 <= lamps.length <= 20000
0 <= queries.length <= 20000
lamps[i].length == queries[i].length == 2
"""

from collections import defaultdict
class Solution:


  def gridIllumination(self, N: 'int', lamps: 'List[List[int]]', queries: 'List[List[int]]') -> 'List[int]':
    x_to_lamps = defaultdict(int)
    y_to_lamps = defaultdict(int)
    b_to_lamps = defaultdict(int)
    c_to_lamps = defaultdict(int)

    xy_to_lamps = {}
    def turn_lamp(x:int,y:int,on:int=1):
      x_to_lamps[x] += on
      y_to_lamps[y] += on
      b_to_lamps[y - x] += on
      c_to_lamps[x + y] += on
    for (x,y) in lamps:
      turn_lamp(x,y,on=1)
      xy_to_lamps[(x,y)] = 1
    def query(x:int,y:int):
      xn = x_to_lamps[x]
      yn = y_to_lamps[y]
      bn = b_to_lamps[y - x]
      cn = c_to_lamps[x + y]
      if any((xn, yn,bn,cn)):
        return 1
      return 0
    def turn_off(x:int,y:int):
      for offx,offy in ((0,0),(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)):
        px = x + offx
        py = y + offy
        if px < 0 or px >= N or py < 0 or py >= N:
          continue
        if xy_to_lamps.get((px,py)):
          turn_lamp(px,py, -1)

    answer = []
    for (x,y) in queries:
      res = query(x,y)
      turn_off(x,y)
      answer.append(res)
    return answer

def test():
  s = Solution()
  # 22 / 33 个通过测试用例
  assert s.gridIllumination(N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]) == [1,0]

  assert s.gridIllumination(100,
                            [[7,55],[53,61],[2,82],[67,85],[81,75],[38,91],[68,0],[60,43],[40,19],[12,75],[26,2],[24,89],[42,81],[60,58],[77,72],[33,24],[19,93],[7,16],[58,54],[78,57],[97,49],[65,16],[42,75],[90,50],[89,34],[76,97],[58,23],[62,47],[94,28],[88,65],[3,87],[81,10],[12,81],[44,81],[54,92],[90,54],[17,54],[27,82],[48,15],[8,46],[4,99],[15,13],[90,77],[2,87],[18,33],[52,90],[4,95],[57,61],[31,22],[32,8],[49,26],[24,65],[88,55],[88,38],[64,76],[94,76],[59,12],[41,46],[80,28],[38,36],[65,67],[75,37],[56,97],[83,57],[2,4],[44,43],[71,90],[62,40],[79,94],[81,11],[96,34],[38,11],[22,3],[54,96],[78,33],[54,54],[79,98],[1,28],[0,32],[37,11]],
                            [[24,84],[95,68],[80,35],[31,53],[69,45],[85,29],[87,25],[42,47],[7,59],[99,3],[31,70],[64,62],[44,91],[55,25],[15,52],[95,33],[21,29],[61,34],[93,34],[79,27],[30,86],[52,0],[18,10],[5,1],[40,21],[11,48],[55,94],[22,42],[81,0],[39,43],[5,25],[43,29],[45,47],[83,93],[77,70],[22,63],[30,73],[18,48],[39,88],[91,47]]) == [1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1]